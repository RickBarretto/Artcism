import ./{src/artcism}!

describe "simple append" [

    it "will fail" [
        expects.be: 'equal? [[a] [b]]
    ]

    it "keeps the order" [
        concat: debug.fmt: "Debugging: |value|" [a] ++ [b c d] 
        expects [equal? [a b c d] concat]
    ]
]

suite "append `:string`s" [

    ; ===== ===== Property-based ===== =====

    it "results in :string" [
        expects.be: 'string? @[to :literal "Art" ++ "uro"] 
    ]
   
    it ":char appending results in :string" [
        expects.be: 'string? @['H'  ++ 'i'  ]
    ]

    it "works with :char" [
        expects.be: 'equal? @["Artur" ++ "o" "Artur" ++ 'o'] 
    ]

    ; ===== ===== Examples ===== =====
    
    test "Arturo can be generated from :string and :char appending" [
        assert.with: 'equal? @["Arturo" "Art" ++ "uro"]
    ]
]

describe "append magic-method" [

    define :container [
        init:   method [ initial ][ this\_block: [] ++ initial ]
        append: method [  value  ][ append this\_block value ]
    ]

    it "should work for magic-methods" [
        container: to :container [[]]!
        
        expects.be: 'equal? @[[1 2] do -> container\append [1 2]]
    ]

]